#!/bin/bash

set -euo pipefail

echo "üîç D√©but du nettoyage des ressources AWS..."

# V√©rifier que l'utilisateur a les permissions n√©cessaires
echo "üîê V√©rification des permissions AWS..."
aws sts get-caller-identity > /dev/null || {
  echo "‚ùå Erreur : Impossible de v√©rifier les permissions AWS. Assurez-vous que vos credentials sont configur√©es et que vous avez les permissions n√©cessaires."
  exit 1
}

# R√©cup√©rer toutes les r√©gions
regions=$(aws ec2 describe-regions --query "Regions[*].RegionName" --output text)
if [ -z "$regions" ]; then
  echo "‚ùå Erreur : Impossible de lister les r√©gions AWS."
  exit 1
fi

# Supprimer les buckets S3 (en dehors de la boucle des r√©gions, car S3 est global)
echo "üîπ Suppression des buckets S3 (sockshop)..."
for bucket in sockshop-mysql-backup sockshop-mongo-backup sockshop-redis-backup; do
  if aws s3api head-bucket --bucket "$bucket" 2>/dev/null; then
    echo "   ‚û§ Suppression du bucket S3: $bucket"
    aws s3 rb "s3://$bucket" --force || {
      echo "   ‚ö†Ô∏è √âchec de la suppression du bucket $bucket. V√©rifiez les permissions ou s'il est d√©j√† supprim√©."
    }
  else
    echo "   ‚ÑπÔ∏è Bucket $bucket n'existe pas, passage..."
  fi
done

for region in $regions; do
  echo "üåç R√©gion en cours: $region"

  # Suppression des clusters EKS
  echo "üîπ Suppression des clusters EKS..."
  for cluster in $(aws eks list-clusters --region "$region" --query "clusters[]" --output text); do
    echo "   ‚û§ Suppression du cluster EKS: $cluster"
    eksctl delete cluster --name "$cluster" --region "$region" --wait || {
      echo "   ‚ö†Ô∏è √âchec de la suppression du cluster EKS $cluster via eksctl. Tentative de suppression manuelle des stacks CloudFormation..."
    }
  done

  # Suppression des stacks CloudFormation r√©siduelles pour les clusters EKS
  echo "üîπ Suppression des stacks CloudFormation r√©siduelles pour EKS..."
  for stack in $(aws cloudformation describe-stacks --region "$region" --query "Stacks[?starts_with(StackName, 'eksctl-')].StackName" --output text); do
    echo "   ‚û§ Suppression de la stack CloudFormation: $stack"
    aws cloudformation delete-stack --stack-name "$stack" --region "$region" || {
      echo "   ‚ö†Ô∏è √âchec de la suppression de la stack $stack. V√©rifiez les d√©pendances ou les permissions."
    }
    # Attendre que la stack soit supprim√©e
    echo "   ‚è≥ Attente de la suppression de la stack $stack..."
    aws cloudformation wait stack-delete-complete --stack-name "$stack" --region "$region" || {
      echo "   ‚ö†Ô∏è La stack $stack n'a pas pu √™tre supprim√©e compl√®tement. V√©rifiez les logs CloudFormation."
    }
  done

  # Suppression des instances DocumentDB (avant les clusters)
  echo "üîπ Suppression des instances DocumentDB..."
  for db in $(aws docdb describe-db-instances --region "$region" --query "DBInstances[*].DBInstanceIdentifier" --output text); do
    echo "   ‚û§ Suppression de l‚Äôinstance DocumentDB: $db"
    aws docdb delete-db-instance --db-instance-identifier "$db" --region "$region" || {
      echo "   ‚ö†Ô∏è √âchec de la suppression de l‚Äôinstance DocumentDB $db."
    }
    # Attendre que l‚Äôinstance soit supprim√©e
    echo "   ‚è≥ Attente de la suppression de l‚Äôinstance DocumentDB $db..."
    aws docdb wait db-instance-deleted --db-instance-identifier "$db" --region "$region" || true
  done

  # Suppression des clusters DocumentDB
  echo "üîπ Suppression des clusters DocumentDB..."
  for cluster in $(aws docdb describe-db-clusters --region "$region" --query "DBClusters[*].DBClusterIdentifier" --output text); do
    echo "   ‚û§ Suppression du cluster DocumentDB: $cluster"
    aws docdb delete-db-cluster --db-cluster-identifier "$cluster" --region "$region" --skip-final-snapshot || {
      echo "   ‚ö†Ô∏è √âchec de la suppression du cluster DocumentDB $cluster."
    }
    # Attendre que le cluster soit supprim√©
    echo "   ‚è≥ Attente de la suppression du cluster DocumentDB $cluster..."
    aws docdb wait db-cluster-deleted --db-cluster-identifier "$cluster" --region "$region" || true
  done

  # Suppression des DB Subnet Groups pour DocumentDB
  echo "üîπ Suppression des DB Subnet Groups pour DocumentDB..."
  for subnet_group in $(aws docdb describe-db-subnet-groups --region "$region" --query "DBSubnetGroups[*].DBSubnetGroupName" --output text); do
    echo "   ‚û§ Suppression du DB Subnet Group: $subnet_group"
    aws docdb delete-db-subnet-group --db-subnet-group-name "$subnet_group" --region "$region" || {
      echo "   ‚ö†Ô∏è √âchec de la suppression du DB Subnet Group $subnet_group."
    }
  done

  # Suppression des instances RDS
  echo "üîπ Suppression des instances RDS..."
  for db in $(aws rds describe-db-instances --region "$region" --query "DBInstances[*].DBInstanceIdentifier" --output text); do
    echo "   ‚û§ Suppression de l‚Äôinstance RDS: $db"
    aws rds delete-db-instance --db-instance-identifier "$db" --region "$region" --skip-final-snapshot || {
      echo "   ‚ö†Ô∏è √âchec de la suppression de l‚Äôinstance RDS $db."
    }
    # Attendre que l‚Äôinstance soit supprim√©e
    echo "   ‚è≥ Attente de la suppression de l‚Äôinstance RDS $db..."
    aws rds wait db-instance-deleted --db-instance-identifier "$db" --region "$region" || true
  done

  # Suppression des DB Subnet Groups pour RDS
  echo "üîπ Suppression des DB Subnet Groups pour RDS..."
  for subnet_group in $(aws rds describe-db-subnet-groups --region "$region" --query "DBSubnetGroups[*].DBSubnetGroupName" --output text); do
    echo "   ‚û§ Suppression du DB Subnet Group: $subnet_group"
    aws rds delete-db-subnet-group --db-subnet-group-name "$subnet_group" --region "$region" || {
      echo "   ‚ö†Ô∏è √âchec de la suppression du DB Subnet Group $subnet_group."
    }
  done

  # Suppression des clusters ElastiCache (Redis)
  echo "üîπ Suppression des clusters ElastiCache..."
  for cache in $(aws elasticache describe-cache-clusters --region "$region" --query "CacheClusters[*].CacheClusterId" --output text); do
    echo "   ‚û§ Suppression du cluster ElastiCache: $cache"
    aws elasticache delete-cache-cluster --cache-cluster-id "$cache" --region "$region" || {
      echo "   ‚ö†Ô∏è √âchec de la suppression du cluster ElastiCache $cache."
    }
    # Attendre que le cluster soit supprim√©
    echo "   ‚è≥ Attente de la suppression du cluster ElastiCache $cache..."
    aws elasticache wait cache-cluster-deleted --cache-cluster-id "$cache" --region "$region" || true
  done

  # Suppression des groupes de sous-r√©seaux ElastiCache (n√©cessaire avant de supprimer les sous-r√©seaux)
  echo "üîπ Suppression des groupes de sous-r√©seaux ElastiCache..."
  for subnet_group in $(aws elasticache describe-cache-subnet-groups --region "$region" --query "CacheSubnetGroups[*].CacheSubnetGroupName" --output text); do
    echo "   ‚û§ Suppression du groupe de sous-r√©seaux ElastiCache: $subnet_group"
    aws elasticache delete-cache-subnet-group --cache-subnet-group-name "$subnet_group" --region "$region" || {
      echo "   ‚ö†Ô∏è √âchec de la suppression du groupe de sous-r√©seaux ElastiCache $subnet_group."
    }
  done

  # Lib√©ration des adresses IP √©lastiques (avant les NAT Gateways)
  echo "üîπ Lib√©ration des adresses IP √©lastiques..."
  for alloc in $(aws ec2 describe-addresses --region "$region" --query "Addresses[*].AllocationId" --output text); do
    echo "   ‚û§ Lib√©ration de l‚ÄôEIP: $alloc"
    aws ec2 release-address --allocation-id "$alloc" --region "$region" || {
      echo "   ‚ö†Ô∏è √âchec de la lib√©ration de l‚ÄôEIP $alloc."
    }
  done

  # Suppression des NAT Gateways
  echo "üîπ Suppression des NAT Gateways..."
  for nat in $(aws ec2 describe-nat-gateways --region "$region" --query "NatGateways[*].NatGatewayId" --output text); do
    echo "   ‚û§ Suppression du NAT Gateway: $nat"
    aws ec2 delete-nat-gateway --nat-gateway-id "$nat" --region "$region" || {
      echo "   ‚ö†Ô∏è √âchec de la suppression du NAT Gateway $nat."
    }
    # Attendre que le NAT Gateway soit supprim√©
    echo "   ‚è≥ Attente de la suppression du NAT Gateway $nat..."
    aws ec2 wait nat-gateway-deleted --nat-gateway-ids "$nat" --region "$region" || true
  done

  # Suppression des Security Groups (sauf ceux par d√©faut)
  echo "üîπ Suppression des Security Groups..."
  for sg in $(aws ec2 describe-security-groups --region "$region" --query "SecurityGroups[?GroupName!='default'].GroupId" --output text); do
    echo "   ‚û§ Suppression du Security Group: $sg"
    # Supprimer les r√®gles d'entr√©e et de sortie pour √©viter les d√©pendances
    aws ec2 revoke-security-group-ingress --group-id "$sg" --region "$region" --protocol all --port all --cidr 0.0.0.0/0 2>/dev/null || true
    aws ec2 revoke-security-group-egress --group-id "$sg" --region "$region" --protocol all --port all --cidr 0.0.0.0/0 2>/dev/null || true
    aws ec2 delete-security-group --group-id "$sg" --region "$region" || {
      echo "   ‚ö†Ô∏è √âchec de la suppression du Security Group $sg. V√©rifiez les d√©pendances."
    }
  done

  # Suppression des VPCs (apr√®s avoir supprim√© les d√©pendances)
  echo "üîπ Suppression des VPCs..."
  for vpc in $(aws ec2 describe-vpcs --region "$region" --query "Vpcs[*].VpcId" --output text); do
    # Ignorer le VPC par d√©faut
    is_default=$(aws ec2 describe-vpcs --vpc-ids "$vpc" --region "$region" --query "Vpcs[0].IsDefault" --output text)
    if [ "$is_default" == "false" ]; then
      echo "   ‚û§ Suppression du VPC: $vpc"
      # Supprimer les d√©pendances du VPC (sous-r√©seaux, tables de routage, gateways Internet)
      for subnet in $(aws ec2 describe-subnets --filters "Name=vpc-id,Values=$vpc" --region "$region" --query "Subnets[*].SubnetId" --output text); do
        echo "      ‚û§ Suppression du sous-r√©seau: $subnet"
        aws ec2 delete-subnet --subnet-id "$subnet" --region "$region" || true
      done
      for rt in $(aws ec2 describe-route-tables --filters "Name=vpc-id,Values=$vpc" --region "$region" --query "RouteTables[*].RouteTableId" --output text); do
        echo "      ‚û§ Suppression de la table de routage: $rt"
        aws ec2 delete-route-table --route-table-id "$rt" --region "$region" || true
      done
      for igw in $(aws ec2 describe-internet-gateways --filters "Name=attachment.vpc-id,Values=$vpc" --region "$region" --query "InternetGateways[*].InternetGatewayId" --output text); do
        echo "      ‚û§ D√©tachement et suppression de l‚ÄôInternet Gateway: $igw"
        aws ec2 detach-internet-gateway --internet-gateway-id "$igw" --vpc-id "$vpc" --region "$region" || true
        aws ec2 delete-internet-gateway --internet-gateway-id "$igw" --region "$region" || true
      done
      # Supprimer le VPC
      aws ec2 delete-vpc --vpc-id "$vpc" --region "$region" || {
        echo "   ‚ö†Ô∏è √âchec de la suppression du VPC $vpc. V√©rifiez les d√©pendances restantes."
      }
    fi
  done

  echo "‚úÖ R√©gion $region trait√©e."
done

echo "üöÄ Nettoyage termin√© !"